name: Deploy Landing Frontend

on:
  push:
    tags:
      - 'v*-landing'

jobs:
  docker:
    runs-on: ubuntu-latest

    # Run only if this push is BOTH on production branch AND a tag matching v*-api
    if: github.ref_name == 'production' || startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-landing')

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Set Docker image version from tag
      - name: Set Docker image version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}  # e.g., v1.2.3-enquiry
          VERSION=${VERSION#v}              # strip leading 'v' â†’ 1.2.3
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log version
        run: echo "Docker image version is $VERSION"

      # 3. Docker login
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      # 4. Create env file for enquiry-service
      - name: Create env file
        run: |
          mkdir -p env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> env/landing-frontend.env

      # 5. Build Docker image
      - name: Build Docker image
        run: docker build -t mykks32/realstate-landing-frontend:$VERSION ./landing-frontend

      # 6. Push Docker image
      - name: Push Docker image
        run: docker push mykks32/realstate-landing-frontend:$VERSION

      # 7. Tag as latest and push
      - name: Tag as latest and push
        run: |
          docker tag mykks32/realstate-landing-frontend:$VERSION mykks32/realstate-landing-frontend:latest
          docker push mykks32/realstate-landing-frontend:latest

      # 8. Calls Render's webhook to deploy the new image
      - name: Trigger Vercel Deploy
        if: success()
        run: |
          curl -X POST "${{ secrets.VERCEL_LANDING_DEPLOY_HOOK }}"
